// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialMedia.Data;

#nullable disable

namespace SocialMedia.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Authentication.SiteUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountPolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Account Policy Id");

                    b.Property<string>("AccountPostPolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Account post Policy Id");

                    b.Property<string>("CommentPolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Comment Policy Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Display Name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("First Name");

                    b.Property<string>("FriendListPolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Friend list Policy Id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Last Name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ReactPolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("React Policy Id");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("User Name");

                    b.HasKey("Id");

                    b.HasIndex("AccountPolicyId");

                    b.HasIndex("AccountPostPolicyId");

                    b.HasIndex("CommentPolicyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FriendListPolicyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ReactPolicyId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Block", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlockedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Blocked User Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "BlockedUserId")
                        .IsUnique();

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Follower", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Follower Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Friend", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FriendId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Friend Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "FriendId")
                        .IsUnique();

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.FriendRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("UserWhoReceivedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Friend Request Person Id");

                    b.Property<string>("UserWhoSendId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User sended friend request Id");

                    b.HasKey("Id");

                    b.HasIndex("UserWhoSendId");

                    b.HasIndex("UserWhoReceivedId", "UserWhoSendId")
                        .IsUnique();

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Group Creator Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GroupPolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Group Policy Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("GroupPolicyId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupAccessRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Group Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("GroupAccessRequests");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Group Id");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId", "GroupId")
                        .IsUnique();

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupMemberRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupMemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Group Member Id");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Role Id");

                    b.HasKey("Id");

                    b.HasIndex("GroupMemberId");

                    b.HasIndex("RoleId", "GroupMemberId")
                        .IsUnique();

                    b.ToTable("GroupMemberRoles");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupPost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Group Id");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupPosts");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("GroupRoles");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Page", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PageFollower", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Follower Id");

                    b.Property<string>("PageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Page Id");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("PageId", "FollowerId")
                        .IsUnique();

                    b.ToTable("PageFollowers");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PagePost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Page Id");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post Id");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("PostId");

                    b.ToTable("PagePosts");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Policy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PolicyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Policy Type");

                    b.HasKey("Id");

                    b.HasIndex("PolicyType")
                        .IsUnique();

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentPolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Post content");

                    b.Property<string>("PostPolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Posted At Date");

                    b.Property<string>("ReactPolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("Post Update Date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentPolicyId");

                    b.HasIndex("PostPolicyId");

                    b.HasIndex("ReactPolicyId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CommentImage")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("CommentImage")
                        .IsUnique()
                        .HasFilter("[CommentImage] IS NOT NULL");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostCommentReplay", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostCommentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post comment Id");

                    b.Property<string>("PostCommentReplayId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post Comment Replay Id");

                    b.Property<string>("Replay")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Replay");

                    b.Property<string>("ReplayImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Replay_Image");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("PostCommentId");

                    b.HasIndex("PostCommentReplayId");

                    b.HasIndex("UserId");

                    b.ToTable("PostCommentReplay", t =>
                        {
                            t.HasCheckConstraint("EncureReplayAndReplayImageNotNull", "(Replay is NOT null AND Replay_Image is NOT null) OR (Replay_Image is null AND Replay is NOT null) OR (Replay is null AND Replay_Image is NOT null)");
                        });
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostImages", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Image Url");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post Id");

                    b.HasKey("Id");

                    b.HasIndex("ImageUrl")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.ToTable("PostImages");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostReacts", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post Id");

                    b.Property<string>("PostReactId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post React Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("PostReactId");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "UserId")
                        .IsUnique();

                    b.ToTable("PostReacts");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostView", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post Id");

                    b.Property<int>("ViewNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Post view number");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.ToTable("PostViews");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.React", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReactValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("React Value");

                    b.HasKey("Id");

                    b.HasIndex("ReactValue")
                        .IsUnique();

                    b.ToTable("Reacts");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.SarehneMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Message");

                    b.Property<string>("MessagePolicyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Message Policy Id");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Receiver Id");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Anonymous");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 6, 14, 21, 57, 44, 921, DateTimeKind.Local).AddTicks(700));

                    b.HasKey("Id");

                    b.HasIndex("MessagePolicyId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("SarehneMessages");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.SavedPosts", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FolderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Folder Id");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Post Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "FolderId")
                        .IsUnique();

                    b.ToTable("SavedPosts");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.UserPage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Page Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PageId", "UserId")
                        .IsUnique();

                    b.ToTable("UserPages");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.UserSavedPostsFolders", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Folder Name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("FolderName", "UserId")
                        .IsUnique();

                    b.ToTable("UserSavedPostsFolders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Authentication.SiteUser", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Policy", "AccountPolicy")
                        .WithMany("UserAccountPolicies")
                        .HasForeignKey("AccountPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Policy", "PostPolicy")
                        .WithMany("UserPostPolicies")
                        .HasForeignKey("AccountPostPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Policy", "CommentPolicy")
                        .WithMany("UserCommentPolicies")
                        .HasForeignKey("CommentPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Policy", "FriendListPolicy")
                        .WithMany("UserFriendListPolicies")
                        .HasForeignKey("FriendListPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Policy", "ReactPolicy")
                        .WithMany("UserReactPolicies")
                        .HasForeignKey("ReactPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountPolicy");

                    b.Navigation("CommentPolicy");

                    b.Navigation("FriendListPolicy");

                    b.Navigation("PostPolicy");

                    b.Navigation("ReactPolicy");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Block", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("Blocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Follower", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("Followers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Friend", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.FriendRequest", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("FriendRequests")
                        .HasForeignKey("UserWhoSendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Group", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("Groups")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Policy", "GroupPolicy")
                        .WithMany("GroupPolicies")
                        .HasForeignKey("GroupPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupPolicy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupAccessRequest", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Group", "Group")
                        .WithMany("GroupAccessRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("GroupAccessRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupMember", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupMemberRole", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.GroupMember", "GroupMember")
                        .WithMany("GroupMemberRoles")
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.GroupRole", "GroupRole")
                        .WithMany("GroupMemberRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupMember");

                    b.Navigation("GroupRole");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupPost", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Group", "Group")
                        .WithMany("GroupPosts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Post", "Post")
                        .WithMany("GroupPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("GroupPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PageFollower", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("PageFollowers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Page", "Page")
                        .WithMany("PageFollowers")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PagePost", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Page", "Page")
                        .WithMany("PagePosts")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Post", "Post")
                        .WithMany("PagePosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Post", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Policy", "CommentPolicy")
                        .WithMany("CommentPolicies")
                        .HasForeignKey("CommentPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Policy", "PostPolicy")
                        .WithMany("PostPolicies")
                        .HasForeignKey("PostPolicyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Policy", "ReactPolicy")
                        .WithMany("ReactPolicies")
                        .HasForeignKey("ReactPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CommentPolicy");

                    b.Navigation("PostPolicy");

                    b.Navigation("ReactPolicy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostComment", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostCommentReplay", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.PostComment", "PostComment")
                        .WithMany("PostCommentReplays")
                        .HasForeignKey("PostCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.PostCommentReplay", "PostCommentReplayChildReplay")
                        .WithMany("PostCommentReplays")
                        .HasForeignKey("PostCommentReplayId");

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("PostCommentReplays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostComment");

                    b.Navigation("PostCommentReplayChildReplay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostImages", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostReacts", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Post", "Post")
                        .WithMany("PostReacts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.React", "React")
                        .WithMany("PostReacts")
                        .HasForeignKey("PostReactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("PostReacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("React");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostView", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Post", "Post")
                        .WithMany("PostViews")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.SarehneMessage", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Policy", "SarehneMessagePolicy")
                        .WithMany("SarehneMessagePolicies")
                        .HasForeignKey("MessagePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("SarehneMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SarehneMessagePolicy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.SavedPosts", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.UserSavedPostsFolders", "UserSavedPostsFolder")
                        .WithMany("SavedPosts")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Post", "Post")
                        .WithMany("SavedPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("SavedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");

                    b.Navigation("UserSavedPostsFolder");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.UserPage", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Page", "Page")
                        .WithMany("UserPages")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("UserPages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.UserSavedPostsFolders", b =>
                {
                    b.HasOne("SocialMedia.Data.Models.Authentication.SiteUser", "User")
                        .WithMany("UserSavedPostsFolders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Authentication.SiteUser", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Followers");

                    b.Navigation("FriendRequests");

                    b.Navigation("Friends");

                    b.Navigation("GroupAccessRequests");

                    b.Navigation("GroupMembers");

                    b.Navigation("GroupPosts");

                    b.Navigation("Groups");

                    b.Navigation("PageFollowers");

                    b.Navigation("PostCommentReplays");

                    b.Navigation("PostComments");

                    b.Navigation("PostReacts");

                    b.Navigation("Posts");

                    b.Navigation("SarehneMessages");

                    b.Navigation("SavedPosts");

                    b.Navigation("UserPages");

                    b.Navigation("UserSavedPostsFolders");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Group", b =>
                {
                    b.Navigation("GroupAccessRequests");

                    b.Navigation("GroupMembers");

                    b.Navigation("GroupPosts");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupMember", b =>
                {
                    b.Navigation("GroupMemberRoles");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.GroupRole", b =>
                {
                    b.Navigation("GroupMemberRoles");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Page", b =>
                {
                    b.Navigation("PageFollowers");

                    b.Navigation("PagePosts");

                    b.Navigation("UserPages");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Policy", b =>
                {
                    b.Navigation("CommentPolicies");

                    b.Navigation("GroupPolicies");

                    b.Navigation("PostPolicies");

                    b.Navigation("ReactPolicies");

                    b.Navigation("SarehneMessagePolicies");

                    b.Navigation("UserAccountPolicies");

                    b.Navigation("UserCommentPolicies");

                    b.Navigation("UserFriendListPolicies");

                    b.Navigation("UserPostPolicies");

                    b.Navigation("UserReactPolicies");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.Post", b =>
                {
                    b.Navigation("GroupPosts");

                    b.Navigation("PagePosts");

                    b.Navigation("PostComments");

                    b.Navigation("PostImages");

                    b.Navigation("PostReacts");

                    b.Navigation("PostViews");

                    b.Navigation("SavedPosts");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostComment", b =>
                {
                    b.Navigation("PostCommentReplays");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.PostCommentReplay", b =>
                {
                    b.Navigation("PostCommentReplays");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.React", b =>
                {
                    b.Navigation("PostReacts");
                });

            modelBuilder.Entity("SocialMedia.Data.Models.UserSavedPostsFolders", b =>
                {
                    b.Navigation("SavedPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
